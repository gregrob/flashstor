version: '3'
services:
  # ---------------------------------------------
  # Setup docker-volume-backup
  #
  # https://hub.docker.com/r/offen/docker-volume-backup
  # ---------------------------------------------
  docker-volume-backup:
    #image:          offen/docker-volume-backup:v2.22.1
    #image:          offen/docker-volume-backup:v2.25.1
    image:          ghcr.io/offen/docker-volume-backup:v2.31.0

    container_name: docker-volume-backup
    restart:        unless-stopped

    security_opt:
      - no-new-privileges:true

    environment:
      # Greedy exclusion of the folder /backup/my-app-backup/backup
      # Use https://regex101.com/ with Goland to derive expression
      - BACKUP_EXCLUDE_REGEXP=\/backup\/my-app-backup\/backup\/.*$

      # Include hostname in backup file name
      - BACKUP_FILENAME=$HOSTNAME-backup-%Y-%m-%dT%H-%M-%S.tar.gz

      # Backups run on the given cron schedule in `busybox` flavor. If no
      # value is set, `@daily` will be used. If you do not want the cron
      # to ever run, use `0 0 5 31 2 ?`.
      # Now moved to /data/common to handle multiple schedules
      #- BACKUP_CRON_EXPRESSION=*/5 * * * *

      # Notifications (email, Slack, etc.) can be sent out when a backup run finishes.
      # Configuration is provided as a comma-separated list of URLs as consumed
      # by `shoutrrr`: https://containrrr.dev/shoutrrr/v0.5/services/overview/
      # The content of such notifications can be customized. Dedicated documentation
      # on how to do this can be found in the README. When providing multiple URLs or
      # an URL that contains a comma, the values can be URL encoded to avoid ambiguities.
      # The below URL demonstrates how to send an email using the provided SMTP
      # configuration and credentials.
      - NOTIFICATION_URLS=smtp://${ENV_DVB_SMTP_USER_NAME:?err}:${ENV_DVB_SMTP_PASSWORD:?err}@smtp.gmail.com:587/?fromAddress=${ENV_DVB_SMTP_USER_NAME:?err}&toAddresses=${ENV_DVB_NOTIFICATION_EMAIL:?err}

      # By default, notifications would only be sent out when a backup run fails
      # To receive notifications for every run, set `NOTIFICATION_LEVEL` to `info`
      # instead of the default `error`.
      - NOTIFICATION_LEVEL=error

    # Uncomment both lines to immediately trigger a single backup
    #restart:    "no"
    #entrypoint: backup

    volumes:
      # Backup data
      - /share/server:/backup/my-app-backup:ro
      
      # Mounting the Docker socket allows the script to stop and restart
      # the container during backup. You can omit this if you don't want
      # to stop the container
      - /var/run/docker.sock:/var/run/docker.sock:ro

      # If you mount a local directory or volume to `/archive` a local
      # copy of the backup will be stored there. You can override the
      # location inside of the container by setting `BACKUP_ARCHIVE`.
      # You can omit this if you do not want to keep local backups.
      - /share/server/backup:/archive

      # Multiple backup schedules
      - ./data/common/conf.d:/etc/dockervolumebackup/conf.d

      # Custom notifications
      - ./data/common/notifications.d:/etc/dockervolumebackup/notifications.d

      # Pass local timezone information to the container
      #- /etc/timezone:/etc/timezone:ro # not for Austor
      - /etc/localtime:/etc/localtime:ro

    labels:
      # Example label to generate a list of files to be deleted
      #- docker-volume-backup.archive-post=/bin/sh -c 'ls /archive -t | awk "NR>7" | xargs -t -I {} echo /archive/{} > /archive/delete_list.txt'      
      #- docker-volume-backup.archive-post=/bin/sh -c 'ls /archive -t | awk "NR>7" | xargs -t -I {} rm -rf /archive/{}'
      - docker-volume-backup.archive-post=/bin/sh -c 'ls /archive -t | awk "NR>$ENV_KEEP_LAST_BACKUPS" | xargs -t -I {} rm -rf /archive/{}'

